<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Access Site</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    html, body {
      height: 100%;
      background-color: #000;
      color: #fff;
      font-family: Arial, sans-serif;
      overflow: hidden;
    }

    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 0;
    }

    .container {
      position: relative;
      width: 100vw;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      perspective: 1000px;
      z-index: 1;
    }

    .card {
      background: #111;
      border: 1px solid #444;
      border-radius: 15px;
      padding: 40px;
      text-align: center;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      box-shadow: 0 20px 40px rgba(255, 255, 255, 0.1);
      will-change: transform;
    }

    .card:hover {
      box-shadow: 0 30px 60px rgba(255, 255, 255, 0.2);
    }

    .button {
      background: none;
      border: 2px solid white;
      color: white;
      padding: 12px 30px;
      font-size: 16px;
      border-radius: 8px;
      text-decoration: none;
      transition: background 0.3s, color 0.3s;
    }

    .button:hover {
      background: white;
      color: black;
    }
  </style>
</head>
<body>
  <canvas id="backgroundCanvas"></canvas>

  <div class="container">
    <div class="card" id="card">
      <a href="https://app.genn.lu/auth/pharaohbe4m" class="button">ACCESS MAIN SITE</a>
    </div>
  </div>

  <script>
    // Particle Background
    const canvas = document.getElementById('backgroundCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = [];
    const maxDistance = 120;

    class Particle {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.size = 2 + Math.random() * 2;
        this.vx = (Math.random() - 0.5) * 1.5;
        this.vy = (Math.random() - 0.5) * 1.5;
      }

      update() {
        this.x += this.vx;
        this.y += this.vy;

        if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
        if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = '#fff';
        ctx.fill();
      }
    }

    function initParticles(count = 100) {
      for (let i = 0; i < count; i++) {
        particles.push(new Particle(
          Math.random() * canvas.width,
          Math.random() * canvas.height
        ));
      }
    }

    function connectParticles() {
      for (let a = 0; a < particles.length; a++) {
        for (let b = a + 1; b < particles.length; b++) {
          const dx = particles[a].x - particles[b].x;
          const dy = particles[a].y - particles[b].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < maxDistance) {
            ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;
            ctx.lineWidth = 0.5;
            ctx.beginPath();
            ctx.moveTo(particles[a].x, particles[a].y);
            ctx.lineTo(particles[b].x, particles[b].y);
            ctx.stroke();
          }
        }
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particles.forEach(p => {
        p.update();
        p.draw();
      });
      connectParticles();
      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    initParticles();
    animate();

    // Card Tilt Effect
    const card = document.getElementById('card');
    document.addEventListener('mousemove', (e) => {
      const x = (e.clientX / window.innerWidth - 0.5) * 30;
      const y = (e.clientY / window.innerHeight - 0.5) * 30;
      card.style.transform = `rotateX(${-y}deg) rotateY(${x}deg)`;
    });
  </script>
</body>
</html>
